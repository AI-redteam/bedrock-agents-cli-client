# ptchat/session_manager.py
import json
from pathlib import Path
import re
from datetime import datetime, timezone
from typing import List, Dict, Optional
from .config import SESSION_DIR, ensure_session_dir # Note the relative import

def _sanitize_filename(name: str) -> str:
    """Sanitizes a string to be a valid filename."""
    name = re.sub(r'[^\w\s-]', '', name).strip().lower()
    name = re.sub(r'[-\s]+', '-', name)
    return name

def save_session(session_data: Dict) -> None:
    """Saves a session to a JSON file."""
    ensure_session_dir()
    session_name = session_data.get("sessionName")
    if not session_name:
        raise ValueError("Session data must have a 'sessionName'")
        
    filename = _sanitize_filename(session_name) + ".json"
    filepath = SESSION_DIR / filename
    
    session_data["lastUpdatedAt"] = datetime.now(timezone.utc).isoformat()
    
    with open(filepath, "w") as f:
        json.dump(session_data, f, indent=2)

def load_session(session_name: str) -> Optional[Dict]:
    """Loads a session from a JSON file."""
    ensure_session_dir()
    filename = _sanitize_filename(session_name) + ".json"
    filepath = SESSION_DIR / filename
    if filepath.exists():
        with open(filepath, "r") as f:
            return json.load(f)
    return None

def list_sessions() -> List[Dict]:
    """Lists all saved sessions, sorted by last updated."""
    ensure_session_dir()
    sessions = []
    for filepath in SESSION_DIR.glob("*.json"):
        with open(filepath, "r") as f:
            try:
                sessions.append(json.load(f))
            except json.JSONDecodeError:
                continue # Skip corrupted files
    
    # Sort by lastUpdatedAt, descending
    sessions.sort(key=lambda s: s.get("lastUpdatedAt", ""), reverse=True)
    return sessions

def delete_session(session_name: str) -> bool:
    """Deletes a session file."""
    ensure_session_dir()
    filename = _sanitize_filename(session_name) + ".json"
    filepath = SESSION_DIR / filename
    if filepath.exists():
        filepath.unlink()
        return True
    return False
